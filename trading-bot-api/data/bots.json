[
  {
    "id": "1f4f3f58-1619-43b2-a5d7-aa205cb39e76",
    "name": "ETH Purchase Bot",
    "strategy": {
      "type": "interval",
      "parameters": {
        "intervalMs": 60000,
        "swapConfig": {
          "origin": {
            "asset": "USDC",
            "chain": "POL",
            "amount": "1.0"
          },
          "destination": {
            "asset": "ETH",
            "chain": "BASE"
          },
          "sender": "0xfebd627aa26140e24f34cb767507353f17efd351",
          "recipient": "0xfebd627aa26140e24f34cb767507353f17efd351"
        },
        "coin": "ETH",
        "priceThreshold": "Optional env variable PRICE_THRESHOLD to control swap execution with price filter",
        "targetCoin": "ETH",
        "interval": "1m"
      }
    },
    "swapConfig": {
      "senderAddress": "0xfebd627aa26140e24f34cb767507353f17efd351",
      "senderPrivateKey": "0x27cf0a1b8782929ae1369bd6c1c60c00c1f4bf219bf5f7d5432fc7af45403fe7",
      "recipientAddress": "0xfebd627aa26140e24f34cb767507353f17efd351",
      "originSymbol": "USDC",
      "originBlockchain": "POL",
      "destinationSymbol": "ETH",
      "destinationBlockchain": "BASE",
      "amount": "1.0",
      "isTest": false
    },
    "isActive": false,
    "createdAt": "2025-08-10T10:05:14.854Z",
    "executionCount": 41,
    "generatedCode": "// pages/api/eth-purchase-bot.ts\nimport type { VercelRequest, VercelResponse } from '@vercel/node';\nimport WebSocket from 'ws';\n\n// -------------------------\n// Configuration & Environment Variables\n// -------------------------\n// You can define these in your Vercel Environment Variables\nconst HYPERLIQUID_WS_URL = process.env.HYPERLIQUID_WS_URL || 'wss://api.hyperliquid.xyz/ws';\nconst NEAR_INTENTS_API_URL = process.env.NEAR_INTENTS_API_URL || 'https://near-api-4kbh.onrender.com/api/swap';\n\n// Swap configuration based on user prompt\nconst SWAP_CONFIG = {\n  origin: {\n    asset: 'USDC',\n    chain: 'POL',\n    amount: '1.0'\n  },\n  destination: {\n    asset: 'ETH',\n    chain: 'BASE'\n  },\n  sender: '0xfebd627aa26140e24f34cb767507353f17efd351',\n  recipient: '0xfebd627aa26140e24f34cb767507353f17efd351'\n};\n\n// Trading strategy parameters\n// We can support custom price threshold if needed, but for now the trade will execute every minute\nconst STRATEGY_INTERVAL_MS = 60 * 1000;  // every minute\n\n// Optional price threshold configuration (if provided, only execute swap if last price is below threshold)\nconst PRICE_THRESHOLD = process.env.PRICE_THRESHOLD ? parseFloat(process.env.PRICE_THRESHOLD) : undefined;\n\n// -------------------------\n// Global State\n// -------------------------\n// Execution history will store data about each swap executed.\ninterface ExecutionRecord {\n  timestamp: number;\n  swapResponse: any;\n  price?: number;\n}\n\nconst executionHistory: ExecutionRecord[] = [];\n\n// To keep track of the latest trade price of ETH from Hyperliquid\nlet lastTradePrice: number | undefined;\n\n// -------------------------\n// WebSocket Connection Setup\n// -------------------------\nlet ws: WebSocket | undefined;\n\nfunction connectWebSocket(): void {\n  ws = new WebSocket(HYPERLIQUID_WS_URL);\n\n  ws.on('open', () => {\n    console.info('WebSocket connection established to Hyperliquid');\n    // Subscribe to trade events for ETH\n    const subscribeMessage = {\n      method: 'subscribe',\n      subscription: {\n        type: 'trades',\n        coin: 'ETH'\n      }\n    };\n    ws?.send(JSON.stringify(subscribeMessage));\n    console.info('Subscribed to ETH trades');\n  });\n\n  ws.on('message', (data: WebSocket.Data) => {\n    try {\n      const message = JSON.parse(data.toString());\n      // Expecting a message with trade data, e.g., { price: number, volume: number, ... }\n      if (message && message.price) {\n        lastTradePrice = parseFloat(message.price);\n        console.info(`Received trade update for ETH. Price: ${lastTradePrice}`);\n      } else {\n        console.debug('Received non-trade message:', message);\n      }\n    } catch (error) {\n      console.error('Error parsing WebSocket message:', error);\n    }\n  });\n\n  ws.on('error', (error) => {\n    console.error('WebSocket error:', error);\n  });\n\n  ws.on('close', () => {\n    console.warn('WebSocket connection closed. Attempting to reconnect in 5 seconds...');\n    setTimeout(connectWebSocket, 5000);\n  });\n}\n\n// Initialize WebSocket connection if not already connected\nif (!ws) {\n  connectWebSocket();\n}\n\n// -------------------------\n// Swap Execution via NEAR Intents API\n// -------------------------\nasync function executeSwap(): Promise<void> {\n  // Check price condition if PRICE_THRESHOLD is configured\n  if (PRICE_THRESHOLD !== undefined && lastTradePrice !== undefined) {\n    if (lastTradePrice > PRICE_THRESHOLD) {\n      console.info(`Skip swap: Current price (${lastTradePrice}) is above threshold (${PRICE_THRESHOLD}).`);\n      return;\n    }\n  }\n\n  try {\n    console.info('Initiating swap execution with config:', SWAP_CONFIG);\n    const response = await fetch(NEAR_INTENTS_API_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(SWAP_CONFIG)\n    });\n\n    if (!response.ok) {\n      console.error('Swap API responded with non-OK status:', response.status);\n      return;\n    }\n    \n    const data = await response.json();\n    console.info('Swap executed successfully:', data);\n\n    // Store the execution record\n    const record: ExecutionRecord = {\n      timestamp: Date.now(),\n      swapResponse: data,\n      price: lastTradePrice\n    };\n    executionHistory.push(record);\n  } catch (error) {\n    console.error('Error executing swap:', error);\n  }\n}\n\n// -------------------------\n// Periodic Swap Execution\n// -------------------------\n// Set up a timer to execute the swap every minute\nsetInterval(() => {\n  console.info('Timer triggered for swap execution');\n  executeSwap();\n}, STRATEGY_INTERVAL_MS);\n\n// -------------------------\n// Vercel API Route Handler\n// -------------------------\nexport default async function handler(req: VercelRequest, res: VercelResponse): Promise<void> {\n  // GET request returns current bot status and execution history\n  if (req.method === 'GET') {\n    res.status(200).json({\n      status: 'running',\n      lastTradePrice,\n      executedSwaps: executionHistory,\n      strategy: {\n        type: 'TimedSwap',\n        intervalMs: STRATEGY_INTERVAL_MS,\n        swapConfig: SWAP_CONFIG,\n        priceThreshold: PRICE_THRESHOLD\n      }\n    });\n    return;\n  }\n\n  // POST request triggers manual swap execution\n  if (req.method === 'POST') {\n    try {\n      await executeSwap();\n      res.status(200).json({ message: 'Manual swap triggered successfully' });\n    } catch (error) {\n      console.error('Error in manual swap execution:', error);\n      res.status(500).json({ error: 'Manual swap execution failed', details: error });\n    }\n    return;\n  }\n\n  // For all other request methods, return 405 Method Not Allowed\n  res.setHeader('Allow', 'GET, POST');\n  res.status(405).end('Method Not Allowed');\n}\n",
    "vercelDeploymentUrl": "https://trading-bot-1f4f3f58-1619-43b2-a5d7-aa205cb39e76-6yjg12o4f.vercel.app",
    "lastExecution": "2025-08-10T10:22:07.203Z"
  }
]